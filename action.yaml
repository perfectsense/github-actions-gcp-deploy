name: 'Brightspot Build'
description: 'Build Brightspot'

inputs:

  project:
    description: 'Shortname for project'
    required: true

  registry:
    description: 'GCP registry to push the build to'
    required: true

  gcp-gcr-secret-key:
    description: 'GCP service account credential'
    required: true

  repository:
    description: 'Repository name.'
    required: true

  docker-image-name:
    description: 'The docker image name to be created for this build. This overrides the default which is ${repository}'
    required: false

  java-distribution:
    description: 'Java distribution'
    required: false
    default: 'adopt'

  java-version:
    description: 'Java version'
    required: false
    default: '11'

  war-build-dir:
    description: 'Directory containing the compiled WAR file. This overrides the default which is web/build/libs'
    required: false
    default: 'web/build/libs'

  gcloud-version:
    description: "The version of gcloud to be installed. Default is 'latest'. Can be set to value by specying the version like '= 417.0.1' for exact match or '>= 417.0.1' for anything above this version match"
    required: false
    default: 'latest'


outputs:
  container-build-tag:
    description: "Container build tag. This tag is stable and won't change."
    value: ${{ steps.build-container.outputs.container-build-tag }}

  container-version-tag:
    description: "Container version tag. This tag is unstable and may move with each build."
    value: ${{ steps.build-container.outputs.container-version-tag }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.java-distribution }}

    - name: Get Tag Version
      shell: bash
      run:  |
        echo "GITHUB_ACTIONS_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        echo "GITHUB_ACTIONS_PULL_REQUEST=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

    - name: Setup gcloud CLI
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ inputs.gcp-gcr-secret-key}}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: "${{ inputs.gcloud-version }}"

    # Configure docker to use the gcloud command-line tool as a credential helper
    - name: Configure docker
      shell: bash
      run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker ${{ inputs.registry }}
    
    - name: Docker test
      shell: bash
      run: |
        gcloud artifacts docker images list ${{ inputs.registry }}/${{ inputs.project }}/${{ inputs.repository }}

    - name: Build Containers
      id: build-container
      shell: bash
      run: |
        echo "Clone Github Actions GCP Deploy"
        git clone https://github.com/perfectsense/github-actions-gcp-deploy.git
        echo "Build with Gradle"
        ./github-actions-gcp-deploy/build-gradle.sh
        version=""
        build=""
        echo "GITHUB_ACTIONS_TAG ${GITHUB_ACTIONS_TAG}"
        echo "GITHUB_ACTIONS_PULL_REQUEST ${GITHUB_ACTIONS_PULL_REQUEST}"
        if [[ ! -z "$GITHUB_ACTIONS_PULL_REQUEST" && "$GITHUB_ACTIONS_PULL_REQUEST" != "" ]]; then
            version="pullrequest-$GITHUB_ACTIONS_PULL_REQUEST"
            build=pullrequest-$GITHUB_ACTIONS_PULL_REQUEST-build$GITHUB_RUN_NUMBER
        elif [[ "$GITHUB_ACTIONS_TAG" =~ ^v[0-9]+\. ]]; then
            echo "GITHUB_ACTIONS_TAG ${GITHUB_ACTIONS_TAG}"
            version=release-${GITHUB_ACTIONS_TAG/v/}
            build=release-${GITHUB_ACTIONS_TAG/v/}
        else
            COMMIT_COUNT=$(git rev-list --count HEAD)
            COMMIT_SHA=$(git rev-parse --short=6 HEAD)
            build=development-$(git describe --all | sed 's/heads\///' | sed 's/\//-/g')
            build+=-build$GITHUB_RUN_NUMBER
            version=development-$(git describe --all | sed 's/heads\///' | sed 's/\//-/g')
        fi
        cp ${{ inputs.war-build-dir }}/*.war etc/container/web.war
        cd etc/container
        PROJECT="${{ inputs.project }}"
        REGISTRY="${{ inputs.registry }}"
        REPOSITORY="${{ inputs.repository }}"

        IMAGE_NAME="${{ inputs.docker-image-name }}"
        if [ -z ${IMAGE_NAME} ]; then
           IMAGE_NAME="$REPOSITORY"
        fi

        BUILD_TAG="$REGISTRY/$PROJECT/$REPOSITORY/$IMAGE_NAME:$build"
        VERSION_TAG="$REGISTRY/$PROJECT/$REPOSITORY/$IMAGE_NAME:$version"
        docker buildx build --push \
            --build-arg WAR_ARTIFACT=web.war \
              -t $VERSION_TAG \
              -t $BUILD_TAG \
            -f Dockerfile .
        echo "name=container-build-tag::$(echo $BUILD_TAG)" >> $GITHUB_OUTPUT
        echo "name=container-version-tag::$(echo $VERSION_TAG)" >> $GITHUB_OUTPUT
